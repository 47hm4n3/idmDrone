grammar sar.drone.Drn with org.eclipse.xtext.common.Terminals

generate drn "http://www.drone.sar/Drn"

// automatically generated by Xtext

//import "upmc.sar.idm.drone"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model :
	'MODEL'
	'{'
		(context=Context)?
		assignement+=Assignement ( assignement+=Assignement)*
		'start' '=' main=RefPart ';'
	'}'
;


/******************* Contexte *********************/

Context :
	'CONTEXT'
	'{'
		limit+=Limit ";"
		(limit+=Limit ";")* 
	'}'
;
	
Limit :
	Vmax | Hmax
;

Vmax :
	name="vmax"
	'='(value=EInt)	
;

Hmax :
	name="hmax"
	'='(value=EInt)
;

/******************* Alias *********************/

Assignement :
	name=ID
	'('
		(parametre+=Parametre ( "," parametre+=Parametre)*)?
	')''{'
		operandes+=Expression ';'
		(operandes+=Expression ';')*
	'}'
;

Parametre :// Parametre:
	name=ID
;
	

/******************* Expression *********************/


Expression :
	( (And|RefPart|DepX_Impl|DepY_Impl|DepZ_Impl|DepXY_IMPL|DepXZ_IMPL|DepYZ_IMPL|DepXYZ_IMPL|TakeOff|Wait|Rotate|Land) ('X' (repeatCST=EInt | repeatVAR=[Parametre]))? (^with+=With)? 
	| '(' (And|RefPart|DepX_Impl|DepY_Impl|DepZ_Impl|DepXY_IMPL|DepXZ_IMPL|DepYZ_IMPL|DepXYZ_IMPL|TakeOff|Wait|Rotate|Land) ('then'then+=Expression) ('then'then+=Expression)* ')' ('X' (repeatCST=EInt | repeatVAR=[Parametre]))? (^with+=With)?
	)
;

RefPart :
	variable_partie=[Assignement]
	'(' 
	(params+=EInt ',')*
	")"
;

And :
	{And}
	name='merge''('
	 (rotate+=Rotate|depx+=DepX_Impl|depy+=DepY_Impl|depxz+=DepXZ_IMPL|depxy+=DepXY_IMPL|depz+=DepZ_Impl)','
	 (rotate+=Rotate|depx+=DepX_Impl|depy+=DepY_Impl|depxz+=DepXZ_IMPL|depxy+=DepXY_IMPL|depz+=DepZ_Impl)
	 (','(rotate+=Rotate|depx+=DepX_Impl|depy+=DepY_Impl|depxz+=DepXZ_IMPL|depxy+=DepXY_IMPL|depz+=DepZ_Impl) )*
	')'		
;

/******************* Action *********************/
	


DepY_Impl: FORWARD | BACKWARD;

FORWARD:
	name="forward" '('
		'distance''=' (distanceVar=[Parametre] | distanceCST=EInt )
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;
BACKWARD:
	 name="backward" '('
		'distance''=' ( distanceCST=EInt | distanceVar=[Parametre] )
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;

DepX_Impl : LEFT | RIGHT
;
LEFT:
	 name="left" '('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;
RIGHT:
	 name="right" '('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;


DepZ_Impl : UP|DOWN;

UP:
	 name="up" '('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;
DOWN:
	 name="down" '('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;




DepXY_IMPL: DepXY | CERCLEXY | CARREXY;
DepXY :
	 name="depXY"'('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
	;

CERCLEXY:
	 name="cercleXY" '('
		'rayon''=' (rayonCST=EInt | rayonVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;
CARREXY:
	 name="carreXY" '('
		'cote''=' (coteCST = EInt | coteVAR = [Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
;

DepYZ_IMPL: DepYZ | CERCLEYZ | CARREYZ;
DepYZ :
	 name="depYZ" '('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
	;

CERCLEYZ:
	 name="cercleYZ" '('
		'rayon''=' (rayonCST=EInt | rayonVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre])  
	')'
;
CARREYZ:
	 name="carreYZ" '('
		'cote''=' (coteCST = EInt | coteVAR = [Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre])
	')'
;

DepXZ_IMPL: DepXZ ;


DepXZ :
	 name="depXZ" '('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
	;


DepXYZ_IMPL: DepXYZ | Flip;

DepXYZ :
	 name="depXYZ" '('
		'distance''=' (distanceCST=EInt | distanceVar=[Parametre])
		'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')'
	;
	
Flip :
	 name="flip" '('')'
;

Rotate :
	 name="rotate" '(''angle''=' (angleCST=EInt| angleVAR= [Parametre])  'temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) 
	')';
	
Wait :
	 name="wait" '(''temps''=' (tempsCST=EInt | tempsVAR=[Parametre]) ')';

TakeOff :
	 name="takeoff" '('')' 
;

Land :
	 name="land"'('')'
;


/******************* Option *********************/
With :
	name='with' option+=Option ( "," option+=Option)*
;

Option :
	Led_Impl | LedBlink | Camera;

Led_Impl :// Led:
	name='led'
	'('
	'color''=' color=ColorLed
	')'
;

LedBlink :// LedBlink:
	name='ledBlink'
	'('
	('color''=' color=ColorLed)
	('blink_per_sec''=' (blink_per_secCST=EInt | blink_per_secVAR=[Parametre] ) )
	')';

Camera :// Camera:
	name='camera'
	'('
	'mode=' mode=Mode
	')'
;


/******************* Type *********************/

EInt :
	'-'? INT;


enum ColorLed :// ColorLed:
				BLUE = 'BLUE' | RED = 'RED' | YELLOW = 'YELLOW' | GREEN='GREEN' | WHITE='WHITE';

enum Mode :// Mode:
				OFF = 'OFF' | ON = 'ON';

enum EBool :
				TRUE = 'TRUE' | FALSE = 'FALSE';