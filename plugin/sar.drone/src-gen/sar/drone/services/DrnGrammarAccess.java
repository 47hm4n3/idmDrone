/*
 * generated by Xtext 2.10.0
 */
package sar.drone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DrnGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMODELKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextContextParserRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		private final Assignment cAssignementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssignementAssignementParserRuleCall_3_0 = (RuleCall)cAssignementAssignment_3.eContents().get(0);
		private final Assignment cAssignementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAssignementAssignementParserRuleCall_4_0 = (RuleCall)cAssignementAssignment_4.eContents().get(0);
		private final Keyword cStartKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMainAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMainRefPartParserRuleCall_7_0 = (RuleCall)cMainAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Model:
		//	'MODEL'
		//	'{'
		//	context=Context?
		//	assignement+=Assignement assignement+=Assignement*
		//	'start' '=' main=RefPart ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MODEL' '{' context=Context? assignement+=Assignement assignement+=Assignement* 'start' '=' main=RefPart ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'MODEL'
		public Keyword getMODELKeyword_0() { return cMODELKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//context=Context?
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_2_0() { return cContextContextParserRuleCall_2_0; }
		
		//assignement+=Assignement
		public Assignment getAssignementAssignment_3() { return cAssignementAssignment_3; }
		
		//Assignement
		public RuleCall getAssignementAssignementParserRuleCall_3_0() { return cAssignementAssignementParserRuleCall_3_0; }
		
		//assignement+=Assignement*
		public Assignment getAssignementAssignment_4() { return cAssignementAssignment_4; }
		
		//Assignement
		public RuleCall getAssignementAssignementParserRuleCall_4_0() { return cAssignementAssignementParserRuleCall_4_0; }
		
		//'start'
		public Keyword getStartKeyword_5() { return cStartKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//main=RefPart
		public Assignment getMainAssignment_7() { return cMainAssignment_7; }
		
		//RefPart
		public RuleCall getMainRefPartParserRuleCall_7_0() { return cMainRefPartParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONTEXTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimitLimitParserRuleCall_2_0 = (RuleCall)cLimitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLimitAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLimitLimitParserRuleCall_4_0_0 = (RuleCall)cLimitAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ******************* Contexte ********************* / Context:
		//	'CONTEXT'
		//	'{'
		//	limit+=Limit ";" (limit+=Limit ";")*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CONTEXT' '{' limit+=Limit ";" (limit+=Limit ";")* '}'
		public Group getGroup() { return cGroup; }
		
		//'CONTEXT'
		public Keyword getCONTEXTKeyword_0() { return cCONTEXTKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//limit+=Limit
		public Assignment getLimitAssignment_2() { return cLimitAssignment_2; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_2_0() { return cLimitLimitParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//(limit+=Limit ";")*
		public Group getGroup_4() { return cGroup_4; }
		
		//limit+=Limit
		public Assignment getLimitAssignment_4_0() { return cLimitAssignment_4_0; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_4_0_0() { return cLimitLimitParserRuleCall_4_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Limit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVmaxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHmaxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Limit:
		//	Vmax | Hmax;
		@Override public ParserRule getRule() { return rule; }
		
		//Vmax | Hmax
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Vmax
		public RuleCall getVmaxParserRuleCall_0() { return cVmaxParserRuleCall_0; }
		
		//Hmax
		public RuleCall getHmaxParserRuleCall_1() { return cHmaxParserRuleCall_1; }
	}
	public class VmaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Vmax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameVmaxKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEIntParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Vmax:
		//	name="vmax"
		//	'=' value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//name="vmax" '=' value=EInt
		public Group getGroup() { return cGroup; }
		
		//name="vmax"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"vmax"
		public Keyword getNameVmaxKeyword_0_0() { return cNameVmaxKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=EInt
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_2_0() { return cValueEIntParserRuleCall_2_0; }
	}
	public class HmaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Hmax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameHmaxKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEIntParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Hmax:
		//	name="hmax"
		//	'=' value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//name="hmax" '=' value=EInt
		public Group getGroup() { return cGroup; }
		
		//name="hmax"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"hmax"
		public Keyword getNameHmaxKeyword_0_0() { return cNameHmaxKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=EInt
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_2_0() { return cValueEIntParserRuleCall_2_0; }
	}
	public class AssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Assignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametreAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametreParametreParserRuleCall_2_0_0 = (RuleCall)cParametreAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametreAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametreParametreParserRuleCall_2_1_1_0 = (RuleCall)cParametreAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperandesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperandesExpressionParserRuleCall_5_0 = (RuleCall)cOperandesAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOperandesAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOperandesExpressionParserRuleCall_7_0_0 = (RuleCall)cOperandesAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// ******************* Alias ********************* / Assignement:
		//	name=ID
		//	'(' (parametre+=Parametre ("," parametre+=Parametre)*)?
		//	')' '{'
		//	operandes+=Expression ';' (operandes+=Expression ';')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (parametre+=Parametre ("," parametre+=Parametre)*)? ')' '{' operandes+=Expression ';' (operandes+=Expression
		//';')* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parametre+=Parametre ("," parametre+=Parametre)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parametre+=Parametre
		public Assignment getParametreAssignment_2_0() { return cParametreAssignment_2_0; }
		
		//Parametre
		public RuleCall getParametreParametreParserRuleCall_2_0_0() { return cParametreParametreParserRuleCall_2_0_0; }
		
		//("," parametre+=Parametre)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parametre+=Parametre
		public Assignment getParametreAssignment_2_1_1() { return cParametreAssignment_2_1_1; }
		
		//Parametre
		public RuleCall getParametreParametreParserRuleCall_2_1_1_0() { return cParametreParametreParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//operandes+=Expression
		public Assignment getOperandesAssignment_5() { return cOperandesAssignment_5; }
		
		//Expression
		public RuleCall getOperandesExpressionParserRuleCall_5_0() { return cOperandesExpressionParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//(operandes+=Expression ';')*
		public Group getGroup_7() { return cGroup_7; }
		
		//operandes+=Expression
		public Assignment getOperandesAssignment_7_0() { return cOperandesAssignment_7_0; }
		
		//Expression
		public RuleCall getOperandesExpressionParserRuleCall_7_0_0() { return cOperandesExpressionParserRuleCall_7_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ParametreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Parametre");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parametre:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//// Parametre:
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cAndParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cRefPartParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cDepX_ImplParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cDepY_ImplParserRuleCall_0_0_3 = (RuleCall)cAlternatives_0_0.eContents().get(3);
		private final RuleCall cDepZ_ImplParserRuleCall_0_0_4 = (RuleCall)cAlternatives_0_0.eContents().get(4);
		private final RuleCall cDepXY_IMPLParserRuleCall_0_0_5 = (RuleCall)cAlternatives_0_0.eContents().get(5);
		private final RuleCall cDepXZ_IMPLParserRuleCall_0_0_6 = (RuleCall)cAlternatives_0_0.eContents().get(6);
		private final RuleCall cDepYZ_IMPLParserRuleCall_0_0_7 = (RuleCall)cAlternatives_0_0.eContents().get(7);
		private final RuleCall cDepXYZ_IMPLParserRuleCall_0_0_8 = (RuleCall)cAlternatives_0_0.eContents().get(8);
		private final RuleCall cTakeOffParserRuleCall_0_0_9 = (RuleCall)cAlternatives_0_0.eContents().get(9);
		private final RuleCall cWaitParserRuleCall_0_0_10 = (RuleCall)cAlternatives_0_0.eContents().get(10);
		private final RuleCall cRotateParserRuleCall_0_0_11 = (RuleCall)cAlternatives_0_0.eContents().get(11);
		private final RuleCall cLandParserRuleCall_0_0_12 = (RuleCall)cAlternatives_0_0.eContents().get(12);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cXKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Assignment cRepeatCSTAssignment_0_1_1_0 = (Assignment)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cRepeatCSTEIntParserRuleCall_0_1_1_0_0 = (RuleCall)cRepeatCSTAssignment_0_1_1_0.eContents().get(0);
		private final Assignment cRepeatVARAssignment_0_1_1_1 = (Assignment)cAlternatives_0_1_1.eContents().get(1);
		private final CrossReference cRepeatVARParametreCrossReference_0_1_1_1_0 = (CrossReference)cRepeatVARAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cRepeatVARParametreIDTerminalRuleCall_0_1_1_1_0_1 = (RuleCall)cRepeatVARParametreCrossReference_0_1_1_1_0.eContents().get(1);
		private final Assignment cWithAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cWithWithParserRuleCall_0_2_0 = (RuleCall)cWithAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cAndParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cRefPartParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cDepX_ImplParserRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cDepY_ImplParserRuleCall_1_1_3 = (RuleCall)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cDepZ_ImplParserRuleCall_1_1_4 = (RuleCall)cAlternatives_1_1.eContents().get(4);
		private final RuleCall cDepXY_IMPLParserRuleCall_1_1_5 = (RuleCall)cAlternatives_1_1.eContents().get(5);
		private final RuleCall cDepXZ_IMPLParserRuleCall_1_1_6 = (RuleCall)cAlternatives_1_1.eContents().get(6);
		private final RuleCall cDepYZ_IMPLParserRuleCall_1_1_7 = (RuleCall)cAlternatives_1_1.eContents().get(7);
		private final RuleCall cDepXYZ_IMPLParserRuleCall_1_1_8 = (RuleCall)cAlternatives_1_1.eContents().get(8);
		private final RuleCall cTakeOffParserRuleCall_1_1_9 = (RuleCall)cAlternatives_1_1.eContents().get(9);
		private final RuleCall cWaitParserRuleCall_1_1_10 = (RuleCall)cAlternatives_1_1.eContents().get(10);
		private final RuleCall cRotateParserRuleCall_1_1_11 = (RuleCall)cAlternatives_1_1.eContents().get(11);
		private final RuleCall cLandParserRuleCall_1_1_12 = (RuleCall)cAlternatives_1_1.eContents().get(12);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cThenKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cThenAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cThenExpressionParserRuleCall_1_2_1_0 = (RuleCall)cThenAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cThenKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cThenAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cThenExpressionParserRuleCall_1_3_1_0 = (RuleCall)cThenAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cXKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Alternatives cAlternatives_1_5_1 = (Alternatives)cGroup_1_5.eContents().get(1);
		private final Assignment cRepeatCSTAssignment_1_5_1_0 = (Assignment)cAlternatives_1_5_1.eContents().get(0);
		private final RuleCall cRepeatCSTEIntParserRuleCall_1_5_1_0_0 = (RuleCall)cRepeatCSTAssignment_1_5_1_0.eContents().get(0);
		private final Assignment cRepeatVARAssignment_1_5_1_1 = (Assignment)cAlternatives_1_5_1.eContents().get(1);
		private final CrossReference cRepeatVARParametreCrossReference_1_5_1_1_0 = (CrossReference)cRepeatVARAssignment_1_5_1_1.eContents().get(0);
		private final RuleCall cRepeatVARParametreIDTerminalRuleCall_1_5_1_1_0_1 = (RuleCall)cRepeatVARParametreCrossReference_1_5_1_1_0.eContents().get(1);
		private final Assignment cWithAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cWithWithParserRuleCall_1_6_0 = (RuleCall)cWithAssignment_1_6.eContents().get(0);
		
		/// ******************* Expression ********************* / Expression:
		//	(And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff |
		//	Wait | Rotate | Land) ('X' (repeatCST=EInt | repeatVAR=[Parametre]))? ^with+=With?
		//	| '(' (And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL |
		//	TakeOff | Wait | Rotate | Land) ('then' then+=Expression) ('then' then+=Expression)* ')' ('X' (repeatCST=EInt |
		//	repeatVAR=[Parametre]))? ^with+=With?;
		@Override public ParserRule getRule() { return rule; }
		
		//(And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff | Wait
		//| Rotate | Land) ('X' (repeatCST=EInt | repeatVAR=[Parametre]))? ^with+=With? | '(' (And | RefPart | DepX_Impl |
		//DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff | Wait | Rotate | Land) ('then'
		//then+=Expression) ('then' then+=Expression)* ')' ('X' (repeatCST=EInt | repeatVAR=[Parametre]))? ^with+=With?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff | Wait
		//| Rotate | Land) ('X' (repeatCST=EInt | repeatVAR=[Parametre]))? ^with+=With?
		public Group getGroup_0() { return cGroup_0; }
		
		//(And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff | Wait
		//| Rotate | Land)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//And
		public RuleCall getAndParserRuleCall_0_0_0() { return cAndParserRuleCall_0_0_0; }
		
		//RefPart
		public RuleCall getRefPartParserRuleCall_0_0_1() { return cRefPartParserRuleCall_0_0_1; }
		
		//DepX_Impl
		public RuleCall getDepX_ImplParserRuleCall_0_0_2() { return cDepX_ImplParserRuleCall_0_0_2; }
		
		//DepY_Impl
		public RuleCall getDepY_ImplParserRuleCall_0_0_3() { return cDepY_ImplParserRuleCall_0_0_3; }
		
		//DepZ_Impl
		public RuleCall getDepZ_ImplParserRuleCall_0_0_4() { return cDepZ_ImplParserRuleCall_0_0_4; }
		
		//DepXY_IMPL
		public RuleCall getDepXY_IMPLParserRuleCall_0_0_5() { return cDepXY_IMPLParserRuleCall_0_0_5; }
		
		//DepXZ_IMPL
		public RuleCall getDepXZ_IMPLParserRuleCall_0_0_6() { return cDepXZ_IMPLParserRuleCall_0_0_6; }
		
		//DepYZ_IMPL
		public RuleCall getDepYZ_IMPLParserRuleCall_0_0_7() { return cDepYZ_IMPLParserRuleCall_0_0_7; }
		
		//DepXYZ_IMPL
		public RuleCall getDepXYZ_IMPLParserRuleCall_0_0_8() { return cDepXYZ_IMPLParserRuleCall_0_0_8; }
		
		//TakeOff
		public RuleCall getTakeOffParserRuleCall_0_0_9() { return cTakeOffParserRuleCall_0_0_9; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_0_0_10() { return cWaitParserRuleCall_0_0_10; }
		
		//Rotate
		public RuleCall getRotateParserRuleCall_0_0_11() { return cRotateParserRuleCall_0_0_11; }
		
		//Land
		public RuleCall getLandParserRuleCall_0_0_12() { return cLandParserRuleCall_0_0_12; }
		
		//('X' (repeatCST=EInt | repeatVAR=[Parametre]))?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'X'
		public Keyword getXKeyword_0_1_0() { return cXKeyword_0_1_0; }
		
		//(repeatCST=EInt | repeatVAR=[Parametre])
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//repeatCST=EInt
		public Assignment getRepeatCSTAssignment_0_1_1_0() { return cRepeatCSTAssignment_0_1_1_0; }
		
		//EInt
		public RuleCall getRepeatCSTEIntParserRuleCall_0_1_1_0_0() { return cRepeatCSTEIntParserRuleCall_0_1_1_0_0; }
		
		//repeatVAR=[Parametre]
		public Assignment getRepeatVARAssignment_0_1_1_1() { return cRepeatVARAssignment_0_1_1_1; }
		
		//[Parametre]
		public CrossReference getRepeatVARParametreCrossReference_0_1_1_1_0() { return cRepeatVARParametreCrossReference_0_1_1_1_0; }
		
		//ID
		public RuleCall getRepeatVARParametreIDTerminalRuleCall_0_1_1_1_0_1() { return cRepeatVARParametreIDTerminalRuleCall_0_1_1_1_0_1; }
		
		//^with+=With?
		public Assignment getWithAssignment_0_2() { return cWithAssignment_0_2; }
		
		//With
		public RuleCall getWithWithParserRuleCall_0_2_0() { return cWithWithParserRuleCall_0_2_0; }
		
		//'(' (And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff |
		//Wait | Rotate | Land) ('then' then+=Expression) ('then' then+=Expression)* ')' ('X' (repeatCST=EInt |
		//repeatVAR=[Parametre]))? ^with+=With?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff | Wait
		//| Rotate | Land)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//And
		public RuleCall getAndParserRuleCall_1_1_0() { return cAndParserRuleCall_1_1_0; }
		
		//RefPart
		public RuleCall getRefPartParserRuleCall_1_1_1() { return cRefPartParserRuleCall_1_1_1; }
		
		//DepX_Impl
		public RuleCall getDepX_ImplParserRuleCall_1_1_2() { return cDepX_ImplParserRuleCall_1_1_2; }
		
		//DepY_Impl
		public RuleCall getDepY_ImplParserRuleCall_1_1_3() { return cDepY_ImplParserRuleCall_1_1_3; }
		
		//DepZ_Impl
		public RuleCall getDepZ_ImplParserRuleCall_1_1_4() { return cDepZ_ImplParserRuleCall_1_1_4; }
		
		//DepXY_IMPL
		public RuleCall getDepXY_IMPLParserRuleCall_1_1_5() { return cDepXY_IMPLParserRuleCall_1_1_5; }
		
		//DepXZ_IMPL
		public RuleCall getDepXZ_IMPLParserRuleCall_1_1_6() { return cDepXZ_IMPLParserRuleCall_1_1_6; }
		
		//DepYZ_IMPL
		public RuleCall getDepYZ_IMPLParserRuleCall_1_1_7() { return cDepYZ_IMPLParserRuleCall_1_1_7; }
		
		//DepXYZ_IMPL
		public RuleCall getDepXYZ_IMPLParserRuleCall_1_1_8() { return cDepXYZ_IMPLParserRuleCall_1_1_8; }
		
		//TakeOff
		public RuleCall getTakeOffParserRuleCall_1_1_9() { return cTakeOffParserRuleCall_1_1_9; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_1_1_10() { return cWaitParserRuleCall_1_1_10; }
		
		//Rotate
		public RuleCall getRotateParserRuleCall_1_1_11() { return cRotateParserRuleCall_1_1_11; }
		
		//Land
		public RuleCall getLandParserRuleCall_1_1_12() { return cLandParserRuleCall_1_1_12; }
		
		//('then' then+=Expression)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'then'
		public Keyword getThenKeyword_1_2_0() { return cThenKeyword_1_2_0; }
		
		//then+=Expression
		public Assignment getThenAssignment_1_2_1() { return cThenAssignment_1_2_1; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_2_1_0() { return cThenExpressionParserRuleCall_1_2_1_0; }
		
		//('then' then+=Expression)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'then'
		public Keyword getThenKeyword_1_3_0() { return cThenKeyword_1_3_0; }
		
		//then+=Expression
		public Assignment getThenAssignment_1_3_1() { return cThenAssignment_1_3_1; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_3_1_0() { return cThenExpressionParserRuleCall_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//('X' (repeatCST=EInt | repeatVAR=[Parametre]))?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'X'
		public Keyword getXKeyword_1_5_0() { return cXKeyword_1_5_0; }
		
		//(repeatCST=EInt | repeatVAR=[Parametre])
		public Alternatives getAlternatives_1_5_1() { return cAlternatives_1_5_1; }
		
		//repeatCST=EInt
		public Assignment getRepeatCSTAssignment_1_5_1_0() { return cRepeatCSTAssignment_1_5_1_0; }
		
		//EInt
		public RuleCall getRepeatCSTEIntParserRuleCall_1_5_1_0_0() { return cRepeatCSTEIntParserRuleCall_1_5_1_0_0; }
		
		//repeatVAR=[Parametre]
		public Assignment getRepeatVARAssignment_1_5_1_1() { return cRepeatVARAssignment_1_5_1_1; }
		
		//[Parametre]
		public CrossReference getRepeatVARParametreCrossReference_1_5_1_1_0() { return cRepeatVARParametreCrossReference_1_5_1_1_0; }
		
		//ID
		public RuleCall getRepeatVARParametreIDTerminalRuleCall_1_5_1_1_0_1() { return cRepeatVARParametreIDTerminalRuleCall_1_5_1_1_0_1; }
		
		//^with+=With?
		public Assignment getWithAssignment_1_6() { return cWithAssignment_1_6; }
		
		//With
		public RuleCall getWithWithParserRuleCall_1_6_0() { return cWithWithParserRuleCall_1_6_0; }
	}
	public class RefPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.RefPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariable_partieAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariable_partieAssignementCrossReference_0_0 = (CrossReference)cVariable_partieAssignment_0.eContents().get(0);
		private final RuleCall cVariable_partieAssignementIDTerminalRuleCall_0_0_1 = (RuleCall)cVariable_partieAssignementCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsEIntParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RefPart:
		//	variable_partie=[Assignement]
		//	'(' (params+=EInt ',')*
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//variable_partie=[Assignement] '(' (params+=EInt ',')* ")"
		public Group getGroup() { return cGroup; }
		
		//variable_partie=[Assignement]
		public Assignment getVariable_partieAssignment_0() { return cVariable_partieAssignment_0; }
		
		//[Assignement]
		public CrossReference getVariable_partieAssignementCrossReference_0_0() { return cVariable_partieAssignementCrossReference_0_0; }
		
		//ID
		public RuleCall getVariable_partieAssignementIDTerminalRuleCall_0_0_1() { return cVariable_partieAssignementIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(params+=EInt ',')*
		public Group getGroup_2() { return cGroup_2; }
		
		//params+=EInt
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//EInt
		public RuleCall getParamsEIntParserRuleCall_2_0_0() { return cParamsEIntParserRuleCall_2_0_0; }
		
		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameMergeKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cRotateAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cRotateRotateParserRuleCall_3_0_0 = (RuleCall)cRotateAssignment_3_0.eContents().get(0);
		private final Assignment cDepxAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDepxDepX_ImplParserRuleCall_3_1_0 = (RuleCall)cDepxAssignment_3_1.eContents().get(0);
		private final Assignment cDepyAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cDepyDepY_ImplParserRuleCall_3_2_0 = (RuleCall)cDepyAssignment_3_2.eContents().get(0);
		private final Assignment cDepxzAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cDepxzDepXZ_IMPLParserRuleCall_3_3_0 = (RuleCall)cDepxzAssignment_3_3.eContents().get(0);
		private final Assignment cDepxyAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cDepxyDepXY_IMPLParserRuleCall_3_4_0 = (RuleCall)cDepxyAssignment_3_4.eContents().get(0);
		private final Assignment cDepzAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cDepzDepZ_ImplParserRuleCall_3_5_0 = (RuleCall)cDepzAssignment_3_5.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cRotateAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cRotateRotateParserRuleCall_5_0_0 = (RuleCall)cRotateAssignment_5_0.eContents().get(0);
		private final Assignment cDepxAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cDepxDepX_ImplParserRuleCall_5_1_0 = (RuleCall)cDepxAssignment_5_1.eContents().get(0);
		private final Assignment cDepyAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cDepyDepY_ImplParserRuleCall_5_2_0 = (RuleCall)cDepyAssignment_5_2.eContents().get(0);
		private final Assignment cDepxzAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cDepxzDepXZ_IMPLParserRuleCall_5_3_0 = (RuleCall)cDepxzAssignment_5_3.eContents().get(0);
		private final Assignment cDepxyAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cDepxyDepXY_IMPLParserRuleCall_5_4_0 = (RuleCall)cDepxyAssignment_5_4.eContents().get(0);
		private final Assignment cDepzAssignment_5_5 = (Assignment)cAlternatives_5.eContents().get(5);
		private final RuleCall cDepzDepZ_ImplParserRuleCall_5_5_0 = (RuleCall)cDepzAssignment_5_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cRotateAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cRotateRotateParserRuleCall_6_1_0_0 = (RuleCall)cRotateAssignment_6_1_0.eContents().get(0);
		private final Assignment cDepxAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cDepxDepX_ImplParserRuleCall_6_1_1_0 = (RuleCall)cDepxAssignment_6_1_1.eContents().get(0);
		private final Assignment cDepyAssignment_6_1_2 = (Assignment)cAlternatives_6_1.eContents().get(2);
		private final RuleCall cDepyDepY_ImplParserRuleCall_6_1_2_0 = (RuleCall)cDepyAssignment_6_1_2.eContents().get(0);
		private final Assignment cDepxzAssignment_6_1_3 = (Assignment)cAlternatives_6_1.eContents().get(3);
		private final RuleCall cDepxzDepXZ_IMPLParserRuleCall_6_1_3_0 = (RuleCall)cDepxzAssignment_6_1_3.eContents().get(0);
		private final Assignment cDepxyAssignment_6_1_4 = (Assignment)cAlternatives_6_1.eContents().get(4);
		private final RuleCall cDepxyDepXY_IMPLParserRuleCall_6_1_4_0 = (RuleCall)cDepxyAssignment_6_1_4.eContents().get(0);
		private final Assignment cDepzAssignment_6_1_5 = (Assignment)cAlternatives_6_1.eContents().get(5);
		private final RuleCall cDepzDepZ_ImplParserRuleCall_6_1_5_0 = (RuleCall)cDepzAssignment_6_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//And:
		//	{And} name='merge' '(' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//	depz+=DepZ_Impl) ',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//	depz+=DepZ_Impl) (',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//	depz+=DepZ_Impl))*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{And} name='merge' '(' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//depz+=DepZ_Impl) ',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//depz+=DepZ_Impl) (',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
		//depz+=DepZ_Impl))* ')'
		public Group getGroup() { return cGroup; }
		
		//{And}
		public Action getAndAction_0() { return cAndAction_0; }
		
		//name='merge'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'merge'
		public Keyword getNameMergeKeyword_1_0() { return cNameMergeKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depz+=DepZ_Impl)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//rotate+=Rotate
		public Assignment getRotateAssignment_3_0() { return cRotateAssignment_3_0; }
		
		//Rotate
		public RuleCall getRotateRotateParserRuleCall_3_0_0() { return cRotateRotateParserRuleCall_3_0_0; }
		
		//depx+=DepX_Impl
		public Assignment getDepxAssignment_3_1() { return cDepxAssignment_3_1; }
		
		//DepX_Impl
		public RuleCall getDepxDepX_ImplParserRuleCall_3_1_0() { return cDepxDepX_ImplParserRuleCall_3_1_0; }
		
		//depy+=DepY_Impl
		public Assignment getDepyAssignment_3_2() { return cDepyAssignment_3_2; }
		
		//DepY_Impl
		public RuleCall getDepyDepY_ImplParserRuleCall_3_2_0() { return cDepyDepY_ImplParserRuleCall_3_2_0; }
		
		//depxz+=DepXZ_IMPL
		public Assignment getDepxzAssignment_3_3() { return cDepxzAssignment_3_3; }
		
		//DepXZ_IMPL
		public RuleCall getDepxzDepXZ_IMPLParserRuleCall_3_3_0() { return cDepxzDepXZ_IMPLParserRuleCall_3_3_0; }
		
		//depxy+=DepXY_IMPL
		public Assignment getDepxyAssignment_3_4() { return cDepxyAssignment_3_4; }
		
		//DepXY_IMPL
		public RuleCall getDepxyDepXY_IMPLParserRuleCall_3_4_0() { return cDepxyDepXY_IMPLParserRuleCall_3_4_0; }
		
		//depz+=DepZ_Impl
		public Assignment getDepzAssignment_3_5() { return cDepzAssignment_3_5; }
		
		//DepZ_Impl
		public RuleCall getDepzDepZ_ImplParserRuleCall_3_5_0() { return cDepzDepZ_ImplParserRuleCall_3_5_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//(rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depz+=DepZ_Impl)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//rotate+=Rotate
		public Assignment getRotateAssignment_5_0() { return cRotateAssignment_5_0; }
		
		//Rotate
		public RuleCall getRotateRotateParserRuleCall_5_0_0() { return cRotateRotateParserRuleCall_5_0_0; }
		
		//depx+=DepX_Impl
		public Assignment getDepxAssignment_5_1() { return cDepxAssignment_5_1; }
		
		//DepX_Impl
		public RuleCall getDepxDepX_ImplParserRuleCall_5_1_0() { return cDepxDepX_ImplParserRuleCall_5_1_0; }
		
		//depy+=DepY_Impl
		public Assignment getDepyAssignment_5_2() { return cDepyAssignment_5_2; }
		
		//DepY_Impl
		public RuleCall getDepyDepY_ImplParserRuleCall_5_2_0() { return cDepyDepY_ImplParserRuleCall_5_2_0; }
		
		//depxz+=DepXZ_IMPL
		public Assignment getDepxzAssignment_5_3() { return cDepxzAssignment_5_3; }
		
		//DepXZ_IMPL
		public RuleCall getDepxzDepXZ_IMPLParserRuleCall_5_3_0() { return cDepxzDepXZ_IMPLParserRuleCall_5_3_0; }
		
		//depxy+=DepXY_IMPL
		public Assignment getDepxyAssignment_5_4() { return cDepxyAssignment_5_4; }
		
		//DepXY_IMPL
		public RuleCall getDepxyDepXY_IMPLParserRuleCall_5_4_0() { return cDepxyDepXY_IMPLParserRuleCall_5_4_0; }
		
		//depz+=DepZ_Impl
		public Assignment getDepzAssignment_5_5() { return cDepzAssignment_5_5; }
		
		//DepZ_Impl
		public RuleCall getDepzDepZ_ImplParserRuleCall_5_5_0() { return cDepzDepZ_ImplParserRuleCall_5_5_0; }
		
		//(',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depz+=DepZ_Impl))*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//(rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL | depz+=DepZ_Impl)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//rotate+=Rotate
		public Assignment getRotateAssignment_6_1_0() { return cRotateAssignment_6_1_0; }
		
		//Rotate
		public RuleCall getRotateRotateParserRuleCall_6_1_0_0() { return cRotateRotateParserRuleCall_6_1_0_0; }
		
		//depx+=DepX_Impl
		public Assignment getDepxAssignment_6_1_1() { return cDepxAssignment_6_1_1; }
		
		//DepX_Impl
		public RuleCall getDepxDepX_ImplParserRuleCall_6_1_1_0() { return cDepxDepX_ImplParserRuleCall_6_1_1_0; }
		
		//depy+=DepY_Impl
		public Assignment getDepyAssignment_6_1_2() { return cDepyAssignment_6_1_2; }
		
		//DepY_Impl
		public RuleCall getDepyDepY_ImplParserRuleCall_6_1_2_0() { return cDepyDepY_ImplParserRuleCall_6_1_2_0; }
		
		//depxz+=DepXZ_IMPL
		public Assignment getDepxzAssignment_6_1_3() { return cDepxzAssignment_6_1_3; }
		
		//DepXZ_IMPL
		public RuleCall getDepxzDepXZ_IMPLParserRuleCall_6_1_3_0() { return cDepxzDepXZ_IMPLParserRuleCall_6_1_3_0; }
		
		//depxy+=DepXY_IMPL
		public Assignment getDepxyAssignment_6_1_4() { return cDepxyAssignment_6_1_4; }
		
		//DepXY_IMPL
		public RuleCall getDepxyDepXY_IMPLParserRuleCall_6_1_4_0() { return cDepxyDepXY_IMPLParserRuleCall_6_1_4_0; }
		
		//depz+=DepZ_Impl
		public Assignment getDepzAssignment_6_1_5() { return cDepzAssignment_6_1_5; }
		
		//DepZ_Impl
		public RuleCall getDepzDepZ_ImplParserRuleCall_6_1_5_0() { return cDepzDepZ_ImplParserRuleCall_6_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class DepY_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepY_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFORWARDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBACKWARDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// ******************* Action ********************* / DepY_Impl:
		//	FORWARD | BACKWARD;
		@Override public ParserRule getRule() { return rule; }
		
		//FORWARD | BACKWARD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD
		public RuleCall getFORWARDParserRuleCall_0() { return cFORWARDParserRuleCall_0; }
		
		//BACKWARD
		public RuleCall getBACKWARDParserRuleCall_1() { return cBACKWARDParserRuleCall_1; }
	}
	public class FORWARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.FORWARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameForwardKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceVarAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cDistanceVarParametreCrossReference_4_0_0 = (CrossReference)cDistanceVarAssignment_4_0.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_0_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_0_0.eContents().get(1);
		private final Assignment cDistanceCSTAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_1_0 = (RuleCall)cDistanceCSTAssignment_4_1.eContents().get(0);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FORWARD:
		//	name="forward" '('
		//	'distance' '=' (distanceVar=[Parametre] | distanceCST=EInt)
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="forward" '(' 'distance' '=' (distanceVar=[Parametre] | distanceCST=EInt) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="forward"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"forward"
		public Keyword getNameForwardKeyword_0_0() { return cNameForwardKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceVar=[Parametre] | distanceCST=EInt)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_0() { return cDistanceVarAssignment_4_0; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_0_0() { return cDistanceVarParametreCrossReference_4_0_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_0_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_0_0_1; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_1() { return cDistanceCSTAssignment_4_1; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_1_0() { return cDistanceCSTEIntParserRuleCall_4_1_0; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class BACKWARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.BACKWARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBackwardKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BACKWARD:
		//	name="backward" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="backward" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="backward"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"backward"
		public Keyword getNameBackwardKeyword_0_0() { return cNameBackwardKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepX_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepX_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLEFTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRIGHTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepX_Impl:
		//	LEFT | RIGHT;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT | RIGHT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT
		public RuleCall getLEFTParserRuleCall_0() { return cLEFTParserRuleCall_0; }
		
		//RIGHT
		public RuleCall getRIGHTParserRuleCall_1() { return cRIGHTParserRuleCall_1; }
	}
	public class LEFTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.LEFT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLeftKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LEFT:
		//	name="left" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="left" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="left"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"left"
		public Keyword getNameLeftKeyword_0_0() { return cNameLeftKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class RIGHTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.RIGHT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRightKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RIGHT:
		//	name="right" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="right" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="right"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"right"
		public Keyword getNameRightKeyword_0_0() { return cNameRightKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepZ_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepZ_Impl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUPParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOWNParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepZ_Impl:
		//	UP | DOWN;
		@Override public ParserRule getRule() { return rule; }
		
		//UP | DOWN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UP
		public RuleCall getUPParserRuleCall_0() { return cUPParserRuleCall_0; }
		
		//DOWN
		public RuleCall getDOWNParserRuleCall_1() { return cDOWNParserRuleCall_1; }
	}
	public class UPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.UP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameUpKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//UP:
		//	name="up" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="up" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="up"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"up"
		public Keyword getNameUpKeyword_0_0() { return cNameUpKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DOWNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DOWN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDownKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DOWN:
		//	name="down" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="down" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="down"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"down"
		public Keyword getNameDownKeyword_0_0() { return cNameDownKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepXY_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXY_IMPL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDepXYParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCERCLEXYParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCARREXYParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DepXY_IMPL:
		//	DepXY | CERCLEXY | CARREXY;
		@Override public ParserRule getRule() { return rule; }
		
		//DepXY | CERCLEXY | CARREXY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DepXY
		public RuleCall getDepXYParserRuleCall_0() { return cDepXYParserRuleCall_0; }
		
		//CERCLEXY
		public RuleCall getCERCLEXYParserRuleCall_1() { return cCERCLEXYParserRuleCall_1; }
		
		//CARREXY
		public RuleCall getCARREXYParserRuleCall_2() { return cCARREXYParserRuleCall_2; }
	}
	public class DepXYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDepXYKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DepXY:
		//	name="depXY" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="depXY" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="depXY"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"depXY"
		public Keyword getNameDepXYKeyword_0_0() { return cNameDepXYKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CERCLEXYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CERCLEXY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCercleXYKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRayonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRayonCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cRayonCSTEIntParserRuleCall_4_0_0 = (RuleCall)cRayonCSTAssignment_4_0.eContents().get(0);
		private final Assignment cRayonVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cRayonVarParametreCrossReference_4_1_0 = (CrossReference)cRayonVarAssignment_4_1.eContents().get(0);
		private final RuleCall cRayonVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRayonVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CERCLEXY:
		//	name="cercleXY" '('
		//	'rayon' '=' (rayonCST=EInt | rayonVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="cercleXY" '(' 'rayon' '=' (rayonCST=EInt | rayonVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="cercleXY"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"cercleXY"
		public Keyword getNameCercleXYKeyword_0_0() { return cNameCercleXYKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'rayon'
		public Keyword getRayonKeyword_2() { return cRayonKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(rayonCST=EInt | rayonVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//rayonCST=EInt
		public Assignment getRayonCSTAssignment_4_0() { return cRayonCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getRayonCSTEIntParserRuleCall_4_0_0() { return cRayonCSTEIntParserRuleCall_4_0_0; }
		
		//rayonVar=[Parametre]
		public Assignment getRayonVarAssignment_4_1() { return cRayonVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getRayonVarParametreCrossReference_4_1_0() { return cRayonVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRayonVarParametreIDTerminalRuleCall_4_1_0_1() { return cRayonVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CARREXYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CARREXY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCarreXYKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCoteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cCoteCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cCoteCSTEIntParserRuleCall_4_0_0 = (RuleCall)cCoteCSTAssignment_4_0.eContents().get(0);
		private final Assignment cCoteVARAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cCoteVARParametreCrossReference_4_1_0 = (CrossReference)cCoteVARAssignment_4_1.eContents().get(0);
		private final RuleCall cCoteVARParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cCoteVARParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CARREXY:
		//	name="carreXY" '('
		//	'cote' '=' (coteCST=EInt | coteVAR=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="carreXY" '(' 'cote' '=' (coteCST=EInt | coteVAR=[Parametre]) 'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//')'
		public Group getGroup() { return cGroup; }
		
		//name="carreXY"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"carreXY"
		public Keyword getNameCarreXYKeyword_0_0() { return cNameCarreXYKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'cote'
		public Keyword getCoteKeyword_2() { return cCoteKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(coteCST=EInt | coteVAR=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//coteCST=EInt
		public Assignment getCoteCSTAssignment_4_0() { return cCoteCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getCoteCSTEIntParserRuleCall_4_0_0() { return cCoteCSTEIntParserRuleCall_4_0_0; }
		
		//coteVAR=[Parametre]
		public Assignment getCoteVARAssignment_4_1() { return cCoteVARAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getCoteVARParametreCrossReference_4_1_0() { return cCoteVARParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getCoteVARParametreIDTerminalRuleCall_4_1_0_1() { return cCoteVARParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepYZ_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepYZ_IMPL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDepYZParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCERCLEYZParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCARREYZParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DepYZ_IMPL:
		//	DepYZ | CERCLEYZ | CARREYZ;
		@Override public ParserRule getRule() { return rule; }
		
		//DepYZ | CERCLEYZ | CARREYZ
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DepYZ
		public RuleCall getDepYZParserRuleCall_0() { return cDepYZParserRuleCall_0; }
		
		//CERCLEYZ
		public RuleCall getCERCLEYZParserRuleCall_1() { return cCERCLEYZParserRuleCall_1; }
		
		//CARREYZ
		public RuleCall getCARREYZParserRuleCall_2() { return cCARREYZParserRuleCall_2; }
	}
	public class DepYZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepYZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDepYZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DepYZ:
		//	name="depYZ" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="depYZ" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="depYZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"depYZ"
		public Keyword getNameDepYZKeyword_0_0() { return cNameDepYZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CERCLEYZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CERCLEYZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCercleYZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRayonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRayonCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cRayonCSTEIntParserRuleCall_4_0_0 = (RuleCall)cRayonCSTAssignment_4_0.eContents().get(0);
		private final Assignment cRayonVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cRayonVarParametreCrossReference_4_1_0 = (CrossReference)cRayonVarAssignment_4_1.eContents().get(0);
		private final RuleCall cRayonVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRayonVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CERCLEYZ:
		//	name="cercleYZ" '('
		//	'rayon' '=' (rayonCST=EInt | rayonVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="cercleYZ" '(' 'rayon' '=' (rayonCST=EInt | rayonVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="cercleYZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"cercleYZ"
		public Keyword getNameCercleYZKeyword_0_0() { return cNameCercleYZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'rayon'
		public Keyword getRayonKeyword_2() { return cRayonKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(rayonCST=EInt | rayonVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//rayonCST=EInt
		public Assignment getRayonCSTAssignment_4_0() { return cRayonCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getRayonCSTEIntParserRuleCall_4_0_0() { return cRayonCSTEIntParserRuleCall_4_0_0; }
		
		//rayonVar=[Parametre]
		public Assignment getRayonVarAssignment_4_1() { return cRayonVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getRayonVarParametreCrossReference_4_1_0() { return cRayonVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRayonVarParametreIDTerminalRuleCall_4_1_0_1() { return cRayonVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CARREYZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.CARREYZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCarreYZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCoteKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cCoteCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cCoteCSTEIntParserRuleCall_4_0_0 = (RuleCall)cCoteCSTAssignment_4_0.eContents().get(0);
		private final Assignment cCoteVARAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cCoteVARParametreCrossReference_4_1_0 = (CrossReference)cCoteVARAssignment_4_1.eContents().get(0);
		private final RuleCall cCoteVARParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cCoteVARParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CARREYZ:
		//	name="carreYZ" '('
		//	'cote' '=' (coteCST=EInt | coteVAR=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="carreYZ" '(' 'cote' '=' (coteCST=EInt | coteVAR=[Parametre]) 'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//')'
		public Group getGroup() { return cGroup; }
		
		//name="carreYZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"carreYZ"
		public Keyword getNameCarreYZKeyword_0_0() { return cNameCarreYZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'cote'
		public Keyword getCoteKeyword_2() { return cCoteKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(coteCST=EInt | coteVAR=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//coteCST=EInt
		public Assignment getCoteCSTAssignment_4_0() { return cCoteCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getCoteCSTEIntParserRuleCall_4_0_0() { return cCoteCSTEIntParserRuleCall_4_0_0; }
		
		//coteVAR=[Parametre]
		public Assignment getCoteVARAssignment_4_1() { return cCoteVARAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getCoteVARParametreCrossReference_4_1_0() { return cCoteVARParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getCoteVARParametreIDTerminalRuleCall_4_1_0_1() { return cCoteVARParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepXZ_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXZ_IMPL");
		private final RuleCall cDepXZParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DepXZ_IMPL:
		//	DepXZ;
		@Override public ParserRule getRule() { return rule; }
		
		//DepXZ
		public RuleCall getDepXZParserRuleCall() { return cDepXZParserRuleCall; }
	}
	public class DepXZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDepXZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DepXZ:
		//	name="depXZ" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="depXZ" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="depXZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"depXZ"
		public Keyword getNameDepXZKeyword_0_0() { return cNameDepXZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class DepXYZ_IMPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXYZ_IMPL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDepXYZParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DepXYZ_IMPL:
		//	DepXYZ | Flip;
		@Override public ParserRule getRule() { return rule; }
		
		//DepXYZ | Flip
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DepXYZ
		public RuleCall getDepXYZParserRuleCall_0() { return cDepXYZParserRuleCall_0; }
		
		//Flip
		public RuleCall getFlipParserRuleCall_1() { return cFlipParserRuleCall_1; }
	}
	public class DepXYZElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.DepXYZ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDepXYZKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDistanceCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDistanceCSTEIntParserRuleCall_4_0_0 = (RuleCall)cDistanceCSTAssignment_4_0.eContents().get(0);
		private final Assignment cDistanceVarAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cDistanceVarParametreCrossReference_4_1_0 = (CrossReference)cDistanceVarAssignment_4_1.eContents().get(0);
		private final RuleCall cDistanceVarParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDistanceVarParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DepXYZ:
		//	name="depXYZ" '('
		//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
		//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="depXYZ" '(' 'distance' '=' (distanceCST=EInt | distanceVar=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="depXYZ"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"depXYZ"
		public Keyword getNameDepXYZKeyword_0_0() { return cNameDepXYZKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(distanceCST=EInt | distanceVar=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//distanceCST=EInt
		public Assignment getDistanceCSTAssignment_4_0() { return cDistanceCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getDistanceCSTEIntParserRuleCall_4_0_0() { return cDistanceCSTEIntParserRuleCall_4_0_0; }
		
		//distanceVar=[Parametre]
		public Assignment getDistanceVarAssignment_4_1() { return cDistanceVarAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getDistanceVarParametreCrossReference_4_1_0() { return cDistanceVarParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDistanceVarParametreIDTerminalRuleCall_4_1_0_1() { return cDistanceVarParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class FlipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Flip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameFlipKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Flip:
		//	name="flip" '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="flip" '(' ')'
		public Group getGroup() { return cGroup; }
		
		//name="flip"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"flip"
		public Keyword getNameFlipKeyword_0_0() { return cNameFlipKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class RotateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Rotate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRotateKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAngleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAngleCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAngleCSTEIntParserRuleCall_4_0_0 = (RuleCall)cAngleCSTAssignment_4_0.eContents().get(0);
		private final Assignment cAngleVARAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cAngleVARParametreCrossReference_4_1_0 = (CrossReference)cAngleVARAssignment_4_1.eContents().get(0);
		private final RuleCall cAngleVARParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cAngleVARParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cTempsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTempsCSTAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_7_0_0 = (RuleCall)cTempsCSTAssignment_7_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_7_1_0 = (CrossReference)cTempsVARAssignment_7_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Rotate:
		//	name="rotate" '(' 'angle' '=' (angleCST=EInt | angleVAR=[Parametre]) 'temps' '=' (tempsCST=EInt |
		//	tempsVAR=[Parametre])
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="rotate" '(' 'angle' '=' (angleCST=EInt | angleVAR=[Parametre]) 'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
		//')'
		public Group getGroup() { return cGroup; }
		
		//name="rotate"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"rotate"
		public Keyword getNameRotateKeyword_0_0() { return cNameRotateKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'angle'
		public Keyword getAngleKeyword_2() { return cAngleKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(angleCST=EInt | angleVAR=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//angleCST=EInt
		public Assignment getAngleCSTAssignment_4_0() { return cAngleCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getAngleCSTEIntParserRuleCall_4_0_0() { return cAngleCSTEIntParserRuleCall_4_0_0; }
		
		//angleVAR=[Parametre]
		public Assignment getAngleVARAssignment_4_1() { return cAngleVARAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getAngleVARParametreCrossReference_4_1_0() { return cAngleVARParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getAngleVARParametreIDTerminalRuleCall_4_1_0_1() { return cAngleVARParametreIDTerminalRuleCall_4_1_0_1; }
		
		//'temps'
		public Keyword getTempsKeyword_5() { return cTempsKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_7_0() { return cTempsCSTAssignment_7_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_7_0_0() { return cTempsCSTEIntParserRuleCall_7_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_7_1() { return cTempsVARAssignment_7_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_7_1_0() { return cTempsVARParametreCrossReference_7_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_7_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWaitKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTempsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTempsCSTAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTempsCSTEIntParserRuleCall_4_0_0 = (RuleCall)cTempsCSTAssignment_4_0.eContents().get(0);
		private final Assignment cTempsVARAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final CrossReference cTempsVARParametreCrossReference_4_1_0 = (CrossReference)cTempsVARAssignment_4_1.eContents().get(0);
		private final RuleCall cTempsVARParametreIDTerminalRuleCall_4_1_0_1 = (RuleCall)cTempsVARParametreCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Wait:
		//	name="wait" '(' 'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre]) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="wait" '(' 'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre]) ')'
		public Group getGroup() { return cGroup; }
		
		//name="wait"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"wait"
		public Keyword getNameWaitKeyword_0_0() { return cNameWaitKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'temps'
		public Keyword getTempsKeyword_2() { return cTempsKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(tempsCST=EInt | tempsVAR=[Parametre])
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//tempsCST=EInt
		public Assignment getTempsCSTAssignment_4_0() { return cTempsCSTAssignment_4_0; }
		
		//EInt
		public RuleCall getTempsCSTEIntParserRuleCall_4_0_0() { return cTempsCSTEIntParserRuleCall_4_0_0; }
		
		//tempsVAR=[Parametre]
		public Assignment getTempsVARAssignment_4_1() { return cTempsVARAssignment_4_1; }
		
		//[Parametre]
		public CrossReference getTempsVARParametreCrossReference_4_1_0() { return cTempsVARParametreCrossReference_4_1_0; }
		
		//ID
		public RuleCall getTempsVARParametreIDTerminalRuleCall_4_1_0_1() { return cTempsVARParametreIDTerminalRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TakeOffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.TakeOff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTakeoffKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TakeOff:
		//	name="takeoff" '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="takeoff" '(' ')'
		public Group getGroup() { return cGroup; }
		
		//name="takeoff"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"takeoff"
		public Keyword getNameTakeoffKeyword_0_0() { return cNameTakeoffKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Land");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLandKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Land:
		//	name="land" '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name="land" '(' ')'
		public Group getGroup() { return cGroup; }
		
		//name="land"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"land"
		public Keyword getNameLandKeyword_0_0() { return cNameLandKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class WithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.With");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWithKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionOptionParserRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionOptionParserRuleCall_2_1_0 = (RuleCall)cOptionAssignment_2_1.eContents().get(0);
		
		/// ******************* Option ********************* / With:
		//	name='with' option+=Option ("," option+=Option)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name='with' option+=Option ("," option+=Option)*
		public Group getGroup() { return cGroup; }
		
		//name='with'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'with'
		public Keyword getNameWithKeyword_0_0() { return cNameWithKeyword_0_0; }
		
		//option+=Option
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//Option
		public RuleCall getOptionOptionParserRuleCall_1_0() { return cOptionOptionParserRuleCall_1_0; }
		
		//("," option+=Option)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//option+=Option
		public Assignment getOptionAssignment_2_1() { return cOptionAssignment_2_1; }
		
		//Option
		public RuleCall getOptionOptionParserRuleCall_2_1_0() { return cOptionOptionParserRuleCall_2_1_0; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLed_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLedBlinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCameraParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Option:
		//	Led_Impl | LedBlink | Camera;
		@Override public ParserRule getRule() { return rule; }
		
		//Led_Impl | LedBlink | Camera
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Led_Impl
		public RuleCall getLed_ImplParserRuleCall_0() { return cLed_ImplParserRuleCall_0; }
		
		//LedBlink
		public RuleCall getLedBlinkParserRuleCall_1() { return cLedBlinkParserRuleCall_1; }
		
		//Camera
		public RuleCall getCameraParserRuleCall_2() { return cCameraParserRuleCall_2; }
	}
	public class Led_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Led_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLedKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColorColorLedEnumRuleCall_4_0 = (RuleCall)cColorAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Led_Impl:
		//	name='led'
		//	'('
		//	'color' '=' color=ColorLed
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//// Led:
		//name='led' '(' 'color' '=' color=ColorLed ')'
		public Group getGroup() { return cGroup; }
		
		//// Led:
		//name='led'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'led'
		public Keyword getNameLedKeyword_0_0() { return cNameLedKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'color'
		public Keyword getColorKeyword_2() { return cColorKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//color=ColorLed
		public Assignment getColorAssignment_4() { return cColorAssignment_4; }
		
		//ColorLed
		public RuleCall getColorColorLedEnumRuleCall_4_0() { return cColorColorLedEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class LedBlinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.LedBlink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLedBlinkKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cColorAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cColorColorLedEnumRuleCall_2_2_0 = (RuleCall)cColorAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBlink_per_secKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cBlink_per_secCSTAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cBlink_per_secCSTEIntParserRuleCall_3_2_0_0 = (RuleCall)cBlink_per_secCSTAssignment_3_2_0.eContents().get(0);
		private final Assignment cBlink_per_secVARAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final CrossReference cBlink_per_secVARParametreCrossReference_3_2_1_0 = (CrossReference)cBlink_per_secVARAssignment_3_2_1.eContents().get(0);
		private final RuleCall cBlink_per_secVARParametreIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cBlink_per_secVARParametreCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LedBlink:
		//	name='ledBlink'
		//	'(' ('color' '=' color=ColorLed) ('blink_per_sec' '=' (blink_per_secCST=EInt | blink_per_secVAR=[Parametre]))
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//// LedBlink:
		//name='ledBlink' '(' ('color' '=' color=ColorLed) ('blink_per_sec' '=' (blink_per_secCST=EInt |
		//blink_per_secVAR=[Parametre])) ')'
		public Group getGroup() { return cGroup; }
		
		//// LedBlink:
		//name='ledBlink'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'ledBlink'
		public Keyword getNameLedBlinkKeyword_0_0() { return cNameLedBlinkKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//('color' '=' color=ColorLed)
		public Group getGroup_2() { return cGroup_2; }
		
		//'color'
		public Keyword getColorKeyword_2_0() { return cColorKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//color=ColorLed
		public Assignment getColorAssignment_2_2() { return cColorAssignment_2_2; }
		
		//ColorLed
		public RuleCall getColorColorLedEnumRuleCall_2_2_0() { return cColorColorLedEnumRuleCall_2_2_0; }
		
		//('blink_per_sec' '=' (blink_per_secCST=EInt | blink_per_secVAR=[Parametre]))
		public Group getGroup_3() { return cGroup_3; }
		
		//'blink_per_sec'
		public Keyword getBlink_per_secKeyword_3_0() { return cBlink_per_secKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//(blink_per_secCST=EInt | blink_per_secVAR=[Parametre])
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//blink_per_secCST=EInt
		public Assignment getBlink_per_secCSTAssignment_3_2_0() { return cBlink_per_secCSTAssignment_3_2_0; }
		
		//EInt
		public RuleCall getBlink_per_secCSTEIntParserRuleCall_3_2_0_0() { return cBlink_per_secCSTEIntParserRuleCall_3_2_0_0; }
		
		//blink_per_secVAR=[Parametre]
		public Assignment getBlink_per_secVARAssignment_3_2_1() { return cBlink_per_secVARAssignment_3_2_1; }
		
		//[Parametre]
		public CrossReference getBlink_per_secVARParametreCrossReference_3_2_1_0() { return cBlink_per_secVARParametreCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getBlink_per_secVARParametreIDTerminalRuleCall_3_2_1_0_1() { return cBlink_per_secVARParametreIDTerminalRuleCall_3_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CameraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Camera");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCameraKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cModeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModeModeEnumRuleCall_3_0 = (RuleCall)cModeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Camera:
		//	name='camera'
		//	'('
		//	'mode=' mode=Mode
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//// Camera:
		//name='camera' '(' 'mode=' mode=Mode ')'
		public Group getGroup() { return cGroup; }
		
		//// Camera:
		//name='camera'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'camera'
		public Keyword getNameCameraKeyword_0_0() { return cNameCameraKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'mode='
		public Keyword getModeKeyword_2() { return cModeKeyword_2; }
		
		//mode=Mode
		public Assignment getModeAssignment_3() { return cModeAssignment_3; }
		
		//Mode
		public RuleCall getModeModeEnumRuleCall_3_0() { return cModeModeEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// ******************* Type ********************* / EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class ColorLedElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.ColorLed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBLUEBLUEKeyword_0_0 = (Keyword)cBLUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREDREDKeyword_1_0 = (Keyword)cREDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cYELLOWYELLOWKeyword_2_0 = (Keyword)cYELLOWEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREENGREENKeyword_3_0 = (Keyword)cGREENEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWHITEWHITEKeyword_4_0 = (Keyword)cWHITEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ColorLed: // ColorLed:
		//	BLUE | RED | YELLOW | GREEN | WHITE;
		public EnumRule getRule() { return rule; }
		
		//// ColorLed:
		//BLUE | RED | YELLOW | GREEN | WHITE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// ColorLed:
		//BLUE
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_0() { return cBLUEEnumLiteralDeclaration_0; }
		
		//'BLUE'
		public Keyword getBLUEBLUEKeyword_0_0() { return cBLUEBLUEKeyword_0_0; }
		
		//RED
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_1() { return cREDEnumLiteralDeclaration_1; }
		
		//'RED'
		public Keyword getREDREDKeyword_1_0() { return cREDREDKeyword_1_0; }
		
		//YELLOW
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_2() { return cYELLOWEnumLiteralDeclaration_2; }
		
		//'YELLOW'
		public Keyword getYELLOWYELLOWKeyword_2_0() { return cYELLOWYELLOWKeyword_2_0; }
		
		//GREEN
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_3() { return cGREENEnumLiteralDeclaration_3; }
		
		//'GREEN'
		public Keyword getGREENGREENKeyword_3_0() { return cGREENGREENKeyword_3_0; }
		
		//WHITE
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_4() { return cWHITEEnumLiteralDeclaration_4; }
		
		//'WHITE'
		public Keyword getWHITEWHITEKeyword_4_0() { return cWHITEWHITEKeyword_4_0; }
	}
	public class ModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.Mode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOFFEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOFFOFFKeyword_0_0 = (Keyword)cOFFEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONONKeyword_1_0 = (Keyword)cONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Mode: // Mode:
		//	OFF | ON;
		public EnumRule getRule() { return rule; }
		
		//// Mode:
		//OFF | ON
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// Mode:
		//OFF
		public EnumLiteralDeclaration getOFFEnumLiteralDeclaration_0() { return cOFFEnumLiteralDeclaration_0; }
		
		//'OFF'
		public Keyword getOFFOFFKeyword_0_0() { return cOFFOFFKeyword_0_0; }
		
		//ON
		public EnumLiteralDeclaration getONEnumLiteralDeclaration_1() { return cONEnumLiteralDeclaration_1; }
		
		//'ON'
		public Keyword getONONKeyword_1_0() { return cONONKeyword_1_0; }
	}
	public class EBoolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "sar.drone.Drn.EBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETRUEKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFALSEKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EBool:
		//	TRUE | FALSE;
		public EnumRule getRule() { return rule; }
		
		//TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'TRUE'
		public Keyword getTRUETRUEKeyword_0_0() { return cTRUETRUEKeyword_0_0; }
		
		//FALSE
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'FALSE'
		public Keyword getFALSEFALSEKeyword_1_0() { return cFALSEFALSEKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final ContextElements pContext;
	private final LimitElements pLimit;
	private final VmaxElements pVmax;
	private final HmaxElements pHmax;
	private final AssignementElements pAssignement;
	private final ParametreElements pParametre;
	private final ExpressionElements pExpression;
	private final RefPartElements pRefPart;
	private final AndElements pAnd;
	private final DepY_ImplElements pDepY_Impl;
	private final FORWARDElements pFORWARD;
	private final BACKWARDElements pBACKWARD;
	private final DepX_ImplElements pDepX_Impl;
	private final LEFTElements pLEFT;
	private final RIGHTElements pRIGHT;
	private final DepZ_ImplElements pDepZ_Impl;
	private final UPElements pUP;
	private final DOWNElements pDOWN;
	private final DepXY_IMPLElements pDepXY_IMPL;
	private final DepXYElements pDepXY;
	private final CERCLEXYElements pCERCLEXY;
	private final CARREXYElements pCARREXY;
	private final DepYZ_IMPLElements pDepYZ_IMPL;
	private final DepYZElements pDepYZ;
	private final CERCLEYZElements pCERCLEYZ;
	private final CARREYZElements pCARREYZ;
	private final DepXZ_IMPLElements pDepXZ_IMPL;
	private final DepXZElements pDepXZ;
	private final DepXYZ_IMPLElements pDepXYZ_IMPL;
	private final DepXYZElements pDepXYZ;
	private final FlipElements pFlip;
	private final RotateElements pRotate;
	private final WaitElements pWait;
	private final TakeOffElements pTakeOff;
	private final LandElements pLand;
	private final WithElements pWith;
	private final OptionElements pOption;
	private final Led_ImplElements pLed_Impl;
	private final LedBlinkElements pLedBlink;
	private final CameraElements pCamera;
	private final EIntElements pEInt;
	private final ColorLedElements eColorLed;
	private final ModeElements eMode;
	private final EBoolElements eEBool;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DrnGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pContext = new ContextElements();
		this.pLimit = new LimitElements();
		this.pVmax = new VmaxElements();
		this.pHmax = new HmaxElements();
		this.pAssignement = new AssignementElements();
		this.pParametre = new ParametreElements();
		this.pExpression = new ExpressionElements();
		this.pRefPart = new RefPartElements();
		this.pAnd = new AndElements();
		this.pDepY_Impl = new DepY_ImplElements();
		this.pFORWARD = new FORWARDElements();
		this.pBACKWARD = new BACKWARDElements();
		this.pDepX_Impl = new DepX_ImplElements();
		this.pLEFT = new LEFTElements();
		this.pRIGHT = new RIGHTElements();
		this.pDepZ_Impl = new DepZ_ImplElements();
		this.pUP = new UPElements();
		this.pDOWN = new DOWNElements();
		this.pDepXY_IMPL = new DepXY_IMPLElements();
		this.pDepXY = new DepXYElements();
		this.pCERCLEXY = new CERCLEXYElements();
		this.pCARREXY = new CARREXYElements();
		this.pDepYZ_IMPL = new DepYZ_IMPLElements();
		this.pDepYZ = new DepYZElements();
		this.pCERCLEYZ = new CERCLEYZElements();
		this.pCARREYZ = new CARREYZElements();
		this.pDepXZ_IMPL = new DepXZ_IMPLElements();
		this.pDepXZ = new DepXZElements();
		this.pDepXYZ_IMPL = new DepXYZ_IMPLElements();
		this.pDepXYZ = new DepXYZElements();
		this.pFlip = new FlipElements();
		this.pRotate = new RotateElements();
		this.pWait = new WaitElements();
		this.pTakeOff = new TakeOffElements();
		this.pLand = new LandElements();
		this.pWith = new WithElements();
		this.pOption = new OptionElements();
		this.pLed_Impl = new Led_ImplElements();
		this.pLedBlink = new LedBlinkElements();
		this.pCamera = new CameraElements();
		this.pEInt = new EIntElements();
		this.eColorLed = new ColorLedElements();
		this.eMode = new ModeElements();
		this.eEBool = new EBoolElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sar.drone.Drn".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'MODEL'
	//	'{'
	//	context=Context?
	//	assignement+=Assignement assignement+=Assignement*
	//	'start' '=' main=RefPart ';'
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	/// ******************* Contexte ********************* / Context:
	//	'CONTEXT'
	//	'{'
	//	limit+=Limit ";" (limit+=Limit ";")*
	//	'}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//Limit:
	//	Vmax | Hmax;
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Vmax:
	//	name="vmax"
	//	'=' value=EInt;
	public VmaxElements getVmaxAccess() {
		return pVmax;
	}
	
	public ParserRule getVmaxRule() {
		return getVmaxAccess().getRule();
	}
	
	//Hmax:
	//	name="hmax"
	//	'=' value=EInt;
	public HmaxElements getHmaxAccess() {
		return pHmax;
	}
	
	public ParserRule getHmaxRule() {
		return getHmaxAccess().getRule();
	}
	
	/// ******************* Alias ********************* / Assignement:
	//	name=ID
	//	'(' (parametre+=Parametre ("," parametre+=Parametre)*)?
	//	')' '{'
	//	operandes+=Expression ';' (operandes+=Expression ';')*
	//	'}';
	public AssignementElements getAssignementAccess() {
		return pAssignement;
	}
	
	public ParserRule getAssignementRule() {
		return getAssignementAccess().getRule();
	}
	
	//Parametre:
	//	name=ID;
	public ParametreElements getParametreAccess() {
		return pParametre;
	}
	
	public ParserRule getParametreRule() {
		return getParametreAccess().getRule();
	}
	
	/// ******************* Expression ********************* / Expression:
	//	(And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL | TakeOff |
	//	Wait | Rotate | Land) ('X' (repeatCST=EInt | repeatVAR=[Parametre]))? ^with+=With?
	//	| '(' (And | RefPart | DepX_Impl | DepY_Impl | DepZ_Impl | DepXY_IMPL | DepXZ_IMPL | DepYZ_IMPL | DepXYZ_IMPL |
	//	TakeOff | Wait | Rotate | Land) ('then' then+=Expression) ('then' then+=Expression)* ')' ('X' (repeatCST=EInt |
	//	repeatVAR=[Parametre]))? ^with+=With?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//RefPart:
	//	variable_partie=[Assignement]
	//	'(' (params+=EInt ',')*
	//	")";
	public RefPartElements getRefPartAccess() {
		return pRefPart;
	}
	
	public ParserRule getRefPartRule() {
		return getRefPartAccess().getRule();
	}
	
	//And:
	//	{And} name='merge' '(' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
	//	depz+=DepZ_Impl) ',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
	//	depz+=DepZ_Impl) (',' (rotate+=Rotate | depx+=DepX_Impl | depy+=DepY_Impl | depxz+=DepXZ_IMPL | depxy+=DepXY_IMPL |
	//	depz+=DepZ_Impl))*
	//	')';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	/// ******************* Action ********************* / DepY_Impl:
	//	FORWARD | BACKWARD;
	public DepY_ImplElements getDepY_ImplAccess() {
		return pDepY_Impl;
	}
	
	public ParserRule getDepY_ImplRule() {
		return getDepY_ImplAccess().getRule();
	}
	
	//FORWARD:
	//	name="forward" '('
	//	'distance' '=' (distanceVar=[Parametre] | distanceCST=EInt)
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public FORWARDElements getFORWARDAccess() {
		return pFORWARD;
	}
	
	public ParserRule getFORWARDRule() {
		return getFORWARDAccess().getRule();
	}
	
	//BACKWARD:
	//	name="backward" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public BACKWARDElements getBACKWARDAccess() {
		return pBACKWARD;
	}
	
	public ParserRule getBACKWARDRule() {
		return getBACKWARDAccess().getRule();
	}
	
	//DepX_Impl:
	//	LEFT | RIGHT;
	public DepX_ImplElements getDepX_ImplAccess() {
		return pDepX_Impl;
	}
	
	public ParserRule getDepX_ImplRule() {
		return getDepX_ImplAccess().getRule();
	}
	
	//LEFT:
	//	name="left" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public LEFTElements getLEFTAccess() {
		return pLEFT;
	}
	
	public ParserRule getLEFTRule() {
		return getLEFTAccess().getRule();
	}
	
	//RIGHT:
	//	name="right" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public RIGHTElements getRIGHTAccess() {
		return pRIGHT;
	}
	
	public ParserRule getRIGHTRule() {
		return getRIGHTAccess().getRule();
	}
	
	//DepZ_Impl:
	//	UP | DOWN;
	public DepZ_ImplElements getDepZ_ImplAccess() {
		return pDepZ_Impl;
	}
	
	public ParserRule getDepZ_ImplRule() {
		return getDepZ_ImplAccess().getRule();
	}
	
	//UP:
	//	name="up" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public UPElements getUPAccess() {
		return pUP;
	}
	
	public ParserRule getUPRule() {
		return getUPAccess().getRule();
	}
	
	//DOWN:
	//	name="down" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public DOWNElements getDOWNAccess() {
		return pDOWN;
	}
	
	public ParserRule getDOWNRule() {
		return getDOWNAccess().getRule();
	}
	
	//DepXY_IMPL:
	//	DepXY | CERCLEXY | CARREXY;
	public DepXY_IMPLElements getDepXY_IMPLAccess() {
		return pDepXY_IMPL;
	}
	
	public ParserRule getDepXY_IMPLRule() {
		return getDepXY_IMPLAccess().getRule();
	}
	
	//DepXY:
	//	name="depXY" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public DepXYElements getDepXYAccess() {
		return pDepXY;
	}
	
	public ParserRule getDepXYRule() {
		return getDepXYAccess().getRule();
	}
	
	//CERCLEXY:
	//	name="cercleXY" '('
	//	'rayon' '=' (rayonCST=EInt | rayonVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public CERCLEXYElements getCERCLEXYAccess() {
		return pCERCLEXY;
	}
	
	public ParserRule getCERCLEXYRule() {
		return getCERCLEXYAccess().getRule();
	}
	
	//CARREXY:
	//	name="carreXY" '('
	//	'cote' '=' (coteCST=EInt | coteVAR=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public CARREXYElements getCARREXYAccess() {
		return pCARREXY;
	}
	
	public ParserRule getCARREXYRule() {
		return getCARREXYAccess().getRule();
	}
	
	//DepYZ_IMPL:
	//	DepYZ | CERCLEYZ | CARREYZ;
	public DepYZ_IMPLElements getDepYZ_IMPLAccess() {
		return pDepYZ_IMPL;
	}
	
	public ParserRule getDepYZ_IMPLRule() {
		return getDepYZ_IMPLAccess().getRule();
	}
	
	//DepYZ:
	//	name="depYZ" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public DepYZElements getDepYZAccess() {
		return pDepYZ;
	}
	
	public ParserRule getDepYZRule() {
		return getDepYZAccess().getRule();
	}
	
	//CERCLEYZ:
	//	name="cercleYZ" '('
	//	'rayon' '=' (rayonCST=EInt | rayonVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public CERCLEYZElements getCERCLEYZAccess() {
		return pCERCLEYZ;
	}
	
	public ParserRule getCERCLEYZRule() {
		return getCERCLEYZAccess().getRule();
	}
	
	//CARREYZ:
	//	name="carreYZ" '('
	//	'cote' '=' (coteCST=EInt | coteVAR=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public CARREYZElements getCARREYZAccess() {
		return pCARREYZ;
	}
	
	public ParserRule getCARREYZRule() {
		return getCARREYZAccess().getRule();
	}
	
	//DepXZ_IMPL:
	//	DepXZ;
	public DepXZ_IMPLElements getDepXZ_IMPLAccess() {
		return pDepXZ_IMPL;
	}
	
	public ParserRule getDepXZ_IMPLRule() {
		return getDepXZ_IMPLAccess().getRule();
	}
	
	//DepXZ:
	//	name="depXZ" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public DepXZElements getDepXZAccess() {
		return pDepXZ;
	}
	
	public ParserRule getDepXZRule() {
		return getDepXZAccess().getRule();
	}
	
	//DepXYZ_IMPL:
	//	DepXYZ | Flip;
	public DepXYZ_IMPLElements getDepXYZ_IMPLAccess() {
		return pDepXYZ_IMPL;
	}
	
	public ParserRule getDepXYZ_IMPLRule() {
		return getDepXYZ_IMPLAccess().getRule();
	}
	
	//DepXYZ:
	//	name="depXYZ" '('
	//	'distance' '=' (distanceCST=EInt | distanceVar=[Parametre])
	//	'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre])
	//	')';
	public DepXYZElements getDepXYZAccess() {
		return pDepXYZ;
	}
	
	public ParserRule getDepXYZRule() {
		return getDepXYZAccess().getRule();
	}
	
	//Flip:
	//	name="flip" '(' ')';
	public FlipElements getFlipAccess() {
		return pFlip;
	}
	
	public ParserRule getFlipRule() {
		return getFlipAccess().getRule();
	}
	
	//Rotate:
	//	name="rotate" '(' 'angle' '=' (angleCST=EInt | angleVAR=[Parametre]) 'temps' '=' (tempsCST=EInt |
	//	tempsVAR=[Parametre])
	//	')';
	public RotateElements getRotateAccess() {
		return pRotate;
	}
	
	public ParserRule getRotateRule() {
		return getRotateAccess().getRule();
	}
	
	//Wait:
	//	name="wait" '(' 'temps' '=' (tempsCST=EInt | tempsVAR=[Parametre]) ')';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//TakeOff:
	//	name="takeoff" '(' ')';
	public TakeOffElements getTakeOffAccess() {
		return pTakeOff;
	}
	
	public ParserRule getTakeOffRule() {
		return getTakeOffAccess().getRule();
	}
	
	//Land:
	//	name="land" '(' ')';
	public LandElements getLandAccess() {
		return pLand;
	}
	
	public ParserRule getLandRule() {
		return getLandAccess().getRule();
	}
	
	/// ******************* Option ********************* / With:
	//	name='with' option+=Option ("," option+=Option)*;
	public WithElements getWithAccess() {
		return pWith;
	}
	
	public ParserRule getWithRule() {
		return getWithAccess().getRule();
	}
	
	//Option:
	//	Led_Impl | LedBlink | Camera;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//Led_Impl:
	//	name='led'
	//	'('
	//	'color' '=' color=ColorLed
	//	')';
	public Led_ImplElements getLed_ImplAccess() {
		return pLed_Impl;
	}
	
	public ParserRule getLed_ImplRule() {
		return getLed_ImplAccess().getRule();
	}
	
	//LedBlink:
	//	name='ledBlink'
	//	'(' ('color' '=' color=ColorLed) ('blink_per_sec' '=' (blink_per_secCST=EInt | blink_per_secVAR=[Parametre]))
	//	')';
	public LedBlinkElements getLedBlinkAccess() {
		return pLedBlink;
	}
	
	public ParserRule getLedBlinkRule() {
		return getLedBlinkAccess().getRule();
	}
	
	//Camera:
	//	name='camera'
	//	'('
	//	'mode=' mode=Mode
	//	')';
	public CameraElements getCameraAccess() {
		return pCamera;
	}
	
	public ParserRule getCameraRule() {
		return getCameraAccess().getRule();
	}
	
	/// ******************* Type ********************* / EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum ColorLed: // ColorLed:
	//	BLUE | RED | YELLOW | GREEN | WHITE;
	public ColorLedElements getColorLedAccess() {
		return eColorLed;
	}
	
	public EnumRule getColorLedRule() {
		return getColorLedAccess().getRule();
	}
	
	//enum Mode: // Mode:
	//	OFF | ON;
	public ModeElements getModeAccess() {
		return eMode;
	}
	
	public EnumRule getModeRule() {
		return getModeAccess().getRule();
	}
	
	//enum EBool:
	//	TRUE | FALSE;
	public EBoolElements getEBoolAccess() {
		return eEBool;
	}
	
	public EnumRule getEBoolRule() {
		return getEBoolAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
